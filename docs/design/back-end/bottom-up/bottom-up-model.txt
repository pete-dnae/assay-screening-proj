# A Note for Non-Software Engineers

When we build software we try to build it from conceptual models that reflect
as closely as possible the fundamental *Truths* of the problem space. This
makes a huge impact on keeping complexity and fragility out of the software,
and avoiding painting ourselves into corners when it comes to wanting changes
later.

This is of the utmost importance for the back-room software, but is not at all
what is wanted for the software you as a user interact with. We make the
software compartmentalised so that the fundamental modelling *Truths* live in
one compartment, and leave the human-facing software free to intervene to
present more convenient concepts to the user.

This document is focussed on the back-room fundamental truths, so please don't
be alarmed if it suggests a painful or inconvenient user experience for you.
This document doesn't have a view on the user experience concepts that should
be presented. They are relatively easy to change and evolve later, BUT only if
we've got the underlying models right.

# Defining Liquid Mixing Truths

We start with a set of models that can describe beyond ambiguity, what is 
required to be present in every well in a plate. We are deliberately going to
start by defining models that encapsulate *Truths*, and which exclude topics 
such as work instructions, processes or workflow steps.

Reagent

    A prescribed *type* of liquid we can go out and procure at a known 
    Concentration.

    E.g. DNA Free Water, a primer, TAQ, a template...

Concentration

    The definition of the volumetric ratio of a Reagent
    with respect to the volume of water that it is currently coexisting with.

    By definition this is just a single, positive, *rational* number. But we 
    can allow the convenience of specifying the number in human friendly ways, 
    including a choice of units.

    A Concentration is defined automomously. It is a state. It has no
    notion of dilution ancestry.

Composition

    Specifies a liquid mixture by enumerating the Reagents present, and the
    Concentration at which each is present.

    This is a *flat* definition. It refers only to Reagents. It cannot refer to
    some intermediate source mixture.

    A Composition does not have, in of itself, a volume. A Composition does
    not change according to how much of it you have.

Measure (as-in a measure of Rum)

    A physical, single, tangible, particular instance of a volume of some 
    liquid.
    Is immutable.
    A glug, a shot, a splash.
    Has a prescribed volume.
    Has a prescribed Composition.
    Can only meaningfully exist in a container which we can identify.
    Such as a bottle, beaker, tube , well, or chamber.
    Every Measure has exactly one container.
    Every container has exactly one Measure.
    The names are in fact interchangeable.
    The logical role of the container is make it possible to identify the 
    Measure. To make the Measure *addressable*.
    For example a label on a bottle, or the plate/row/column indices of a 
    chamber.

# Workflow and Process Models

Our problem space requires us in addition to defining mixing *Truths*, to be
able to provide models:

    - That support the experiment designer's thinking
    - That encapsulate logistically-efficient liquid mixing processes;
      typically the making up and shared use of pre-mixed sub mixtures.

The experiment designer's goals revolve around decisions they make about what
mixtures should be present in each well of each plate in an experiment.
We already have models defined above that are capable of capturing these 
decisions.

Today's experiment designers have evolved logistically-efficient step-by-step
processes which minimise the number of transfer actions required to end up with
the desired well compositions. They customarily use terms like *Master Mix* 
*Buffer Mix* and *Primer Pools* to mean intermediate mixtures that can be 
made up in bulk and then shared across multiple wells. The design thinking 
process for this is cognitively taxing because of the complexities of 
Concentrations being changed at each mixing stage.

We would like to explore the potential for relieving humans of this task, by
deducing automatically the opportunities for intermediate mixing, solely by
inspection of the target well compositions called for, and working back up.

If we can succeed in making the software produce work instructions that
optimise the number of mixing and transfer actions to a minimum (and which are
practical), we gain alot:
    - It is likely to be a more or less instant process, speeding up experiment
      design.
    - It rules out human error.
    - It liberates experiment designers to change their mind, with no cost
      associated.
    - It improves certainty, confidence, and record keeping of what went where.

# Can we Define and Validate Such an Automated Process?

Next steps:

- Propose / Invent a deduction algorithm
- Try to find flaws and weaknesses of it on paper and in discussions
- Probe whether its suggestions are practical, not just logically correct
- Make a rudimentary simple R&D tool that shows the conclusions it reaches - 
  when presented with some final well-composition intents.
- Validate it with our "reference" experiment.
- Validate it with some significantly different style of experiments
- Switch our attention to how it should look / feel / behave to a user.
